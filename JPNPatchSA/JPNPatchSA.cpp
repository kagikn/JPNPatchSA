#include "JPNPatchSA.h"
#include <Windows.h>
#include <array>
#include <string>
#include <iomanip>

//plugin-sdkから流用
GameVersion GetGameVersion()
{
    const int val = *reinterpret_cast<unsigned int*>(0x401000);
    if (val == 0x53EC8B55)
        return GameVersion::v10US_COMPACT;
    if (val == 0x16197BE9)
        return GameVersion::v10US_HOODLUM;

    if (*reinterpret_cast<unsigned int*>(0x401000) == 0x94BF)
        return GameVersion::v10EU;
    if (*reinterpret_cast<unsigned int*>(0x8252FC) == 0x94BF)
        return GameVersion::v11US;
    if (*reinterpret_cast<unsigned int*>(0x82533C) == 0x94BF)
        return GameVersion::v11EU;
    if (*reinterpret_cast<unsigned int*>(0x858D51) == 0x3539F633)
        return GameVersion::STEAM;
    if (*reinterpret_cast<unsigned int*>(0x858C61) == 0x3539F633)
        return GameVersion::STEAM_LV;

    return GameVersion::UNKNOWN;
}

std::wstring GetGameVersionName(GameVersion version)
{
    switch (version) {
    case GameVersion::v10US_COMPACT:
        return L"1.0 US 'Compact'";
    case GameVersion::v10US_HOODLUM:
        return L"1.0 US 'HoodLum'";
    case GameVersion::v10EU:
        return L"1.0 EU";
    case GameVersion::v11US:
        return L"1.01 US";
    case GameVersion::v11EU:
        return L"1.01 EU";
    case GameVersion::STEAM:
        return L"新Steam R2";
    case GameVersion::STEAM_LV:
        return L"新Steam R2-LV'";
    default:
        return L"不明";
    }
}

void ShowErrorBox()
{
    const auto message = L"現在起動しているバージョンでは日本語化できません。\n"
        L"v1.0(Compact以外)かv1.01のgta_sa.exeで起動してください。\n"
        L"現在起動中のexeのバージョン: " + GetGameVersionName(GetGameVersion());

    MessageBox(
        nullptr,
        message.c_str(),
        L"日本語化非対応のバージョンです",
        MB_OK | MB_ICONSTOP);
}

void PatchMemory()
{
#pragma region Instructions 
#pragma warning(push)
#pragma warning(disable:4309)
    constexpr std::array<char, 5> instrForCFont_PrintChar1 = { 0xE9, 0x9A, 0xE3, 0x13, 0x00 };
    constexpr std::array<char, 5> instrForCFont_PrintChar2 = { 0xE9, 0xA8, 0xE3, 0x13, 0x00 };
    constexpr std::array<char, 5> instrForCFont_RenderFontBuffer1 = { 0xE9, 0x50, 0xD4, 0x13, 0x00 };
    constexpr std::array<char, 4> instrForCFont_RenderFontBuffer2 = { 0x89, 0x4C, 0x24, 0x10 };
    constexpr std::array<char, 5> instrForCFont_RenderFontBuffer3 = { 0xE9, 0x7E, 0xD4, 0x13, 0x00 };
    constexpr std::array<char, 5> instrFor719750 = { 0xE9, 0x89, 0xD7, 0x13, 0x00 };
    constexpr std::array<char, 5> instrFor71A150 = { 0xE9, 0xFB, 0xCD, 0x13, 0x00 };
    constexpr std::array<char, 398> instrFor856E00 = { 0x31, 0xC9, 0x8A, 0x0D, 0xC9, 0x1A, 0xC7, 0x00, 0x31, 0xC0, 0x8A, 0x03, 0x3C, 0x81, 0x72, 0x0C, 0x3C, 0x9F, 0x76, 0x37,
        0x3C, 0xE0, 0x72, 0x04, 0x3C, 0xFC, 0x76, 0x2F, 0xC6, 0x05, 0xE0, 0xDF, 0xC9, 0x00, 0x00, 0x52, 0xBA, 0xF0, 0xDF, 0xC9, 0x00, 0xC7, 0x02, 0x00, 0x00, 0x80, 0x3C,
        0xBA, 0xF4, 0xDF, 0xC9, 0x00, 0xC7, 0x02, 0x00, 0x00, 0x20, 0x3D, 0xBA, 0xFC, 0xDF, 0xC9, 0x00, 0xC7, 0x02, 0x00, 0x00, 0xA4, 0x3F, 0x5A, 0xE9, 0x68, 0x2B, 0xEC, 0xFF,
        0x88, 0xC4, 0x8A, 0x43, 0x01, 0x3C, 0x40, 0x72, 0xC8, 0x3C, 0xFC, 0x77, 0xC4, 0x80, 0xFC, 0x98, 0x72, 0x06, 0x77, 0x18, 0x3C, 0x72, 0x77, 0x14, 0x80, 0xEC, 0x81,
        0xD0, 0xE4, 0x3C, 0xA0, 0x73, 0x04, 0x2C, 0x20, 0xEB, 0x0B, 0x80, 0xC4, 0x01, 0x2C, 0x80, 0xEB, 0x04, 0xB4, 0x00, 0xB0, 0x37, 0x43, 0xC6, 0x05, 0xE0, 0xDF, 0xC9, 0x00, 0x01,
        0x52, 0xBA, 0xF0, 0xDF, 0xC9, 0x00, 0xC7, 0x02, 0x00, 0x00, 0x00, 0x3C, 0xBA, 0xF4, 0xDF, 0xC9, 0x00, 0xC7, 0x02, 0x00, 0x00, 0xA0, 0x3C, 0xBA, 0xFC, 0xDF, 0xC9, 0x00,
        0xC7, 0x02, 0x00, 0x00, 0x94, 0x3F, 0x5A, 0x89, 0xC1, 0xE9, 0x20, 0x2B, 0xEC, 0xFF, 0x00, 0x00, 0x00, 0x80, 0x3D, 0xE0, 0xDF, 0xC9, 0x00, 0x01, 0x75, 0x15, 0x83, 0xEC, 0x04,
        0xB8, 0x20, 0x00, 0x00, 0x00, 0x89, 0x44, 0x24, 0x04, 0xDB, 0x44, 0x24, 0x04, 0x83, 0xC4, 0x04, 0xEB, 0x05, 0xE8, 0x9D, 0x18, 0xEC, 0xFF, 0xE9, 0x3E, 0x1C, 0xEC, 0xFF,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3D, 0xE0, 0xDF, 0xC9, 0x00, 0x01, 0x75, 0x15, 0x8B, 0x5C, 0x24, 0x30, 0x89, 0xDA, 0xC1, 0xEA, 0x08, 0x89, 0xD8,
        0x25, 0xFF, 0x00, 0x00, 0x00, 0xE9, 0x41, 0x1C, 0xEC, 0xFF, 0x88, 0xD9, 0xC0, 0xE9, 0x04, 0xE9, 0x30, 0x1C, 0xEC, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x80, 0x3D, 0xE0, 0xDF, 0xC9, 0x00, 0x01, 0x75, 0x07, 0xB8, 0x20, 0x00, 0x00, 0x00, 0xEB, 0x08, 0x0F, 0xB6, 0x84, 0x07, 0xB0, 0x18, 0xC7, 0x00, 0xE9, 0x68, 0x2B, 0xEC, 0xFF,
        0x00, 0x00, 0x00, 0x80, 0x3D, 0xE0, 0xDF, 0xC9, 0x00, 0x01, 0x75, 0x07, 0xB8, 0x20, 0x00, 0x00, 0x00, 0xEB, 0x08, 0x0F, 0xB6, 0x84, 0x11, 0xB0, 0x18, 0xC7, 0x00,
        0xE9, 0x5D, 0x28, 0xEC, 0xFF, 0x00, 0x00, 0x00, 0x8A, 0x06, 0x3C, 0x81, 0x72, 0x0C, 0x3C, 0x9F, 0x76, 0x11, 0x3C, 0xE0, 0x72, 0x04, 0x3C, 0xFC, 0x76, 0x09,
        0xC6, 0x05, 0xE0, 0xDF, 0xC9, 0x00, 0x00, 0xEB, 0x15, 0x8A, 0x66, 0x01, 0x80, 0xFC, 0x40, 0x72, 0xEF, 0x80, 0xFC, 0xFC, 0x77, 0xEA,
        0xC6, 0x05, 0xE0, 0xDF, 0xC9, 0x00, 0x01, 0x46, 0x3C, 0x20, 0x8A, 0x8C, 0x24, 0xA8, 0x01, 0x00, 0x00, 0xE9, 0xCD, 0x31, 0xEC, 0xFF };

    constexpr std::array<char, 6> instrForFMulDWordC9DFF0 = { 0xD8, 0x0D, 0xF0, 0xDF, 0xC9, 0x00 };
    constexpr std::array<char, 6> instrForFldDWordC9DFF0 = { 0xD9, 0x05, 0xF0, 0xDF, 0xC9, 0x00 };
    constexpr std::array<char, 6> instrForFCompDWordC9DFF0 = { 0xD8, 0x1D, 0xF0, 0xDF, 0xC9, 0x00 };
    constexpr std::array<char, 6> instrForFAddDWordC9DFF0 = { 0xD8, 0x05, 0xF0, 0xDF, 0xC9, 0x00 };
    constexpr std::array<char, 6> instrForFMulDWordC9DFF4 = { 0xD8, 0x0D, 0xF4, 0xDF, 0xC9, 0x00 };
    constexpr std::array<char, 6> instrForFAddDWordC9DFF4 = { 0xD8, 0x05, 0xF4, 0xDF, 0xC9, 0x00 };
    constexpr std::array<char, 6> instrForFMulQWordC9DFF8 = { 0xDC, 0x0D, 0xF8, 0xDF, 0xC9, 0x00 };
#pragma warning(pop)

    //0x6D40AB(GetFiringRateMultiplier)と0x6D40C7(GetFiringRateMultiplier)と0x6D40FB+0x6D4117(GetPlaneGunsRateOfFire)と
    //0x6D45AB+0x6D45C7(GetPlaneOrdnanceRateOfFire)と0x6EFCF6+0x6EFD22+0x6EFD51(RenderWater?)は書き換える必要がないので除外済み
    //callやpushなどがあったアドレスの書き換えはゲームが落ちる原因となったのでそれらのアドレスはすべて除外済み
    //0x718B5A(PrintChar内)は書き換え必須、0x718B74(PrintChar内)も書き換えるべきだと思われるが他が本当に書き換える必要があるかは要検証
    constexpr std::array<int, 288> AddressesForFMulDWordC9DFF0 =
    { 0x450714, 0x4508E0, 0x462C31, 0x536244, 0x5363FD, 0x57688F, 0x5768AD, 0x579643, 0x579665, 0x579CC4, 0x57A3EB,
    0x718B5A, 0x718B74, 0x718BE9, 0x848F56, 0x849016, 0x8490D6, 0x849196, 0x849256, 0x849316, 0x8493D6,
    0x849666, 0x849726, 0x8497E6, 0x8498A6, 0x849966, 0x849A26, 0x849AE6, 0x849BA6, 0x849C66, 0x849D56, 0x849E16, 0x849F06, 0x849FC6, 0x84A0E6,
    0x84A1A6, 0x84A286, 0x84A346, 0x84A406, 0x84A4C6, 0x84A5A6, 0x84A5C6, 0x84A6A6, 0x84A826, 0x84A8E6, 0x84A9A6, 0x84AA66, 0x84AB26, 0x84ABE6, 0x84ACA6,
    0x84AD66, 0x84AE26, 0x84AEE6, 0x84AFA6, 0x84B066, 0x84B126, 0x84B146, 0x84B226, 0x84B2F6, 0x84B3B6, 0x84B3D6, 0x84B496, 0x84B556, 0x84B636,
    0x84B676, 0x84B6B6, 0x84B776, 0x84B836, 0x84B8F6, 0x84B9B6, 0x84BAD6, 0x84BB96, 0x84BBB6, 0x84BBD6, 0x84BD56, 0x84BD76, 0x84BD96,
    0x84BE56, 0x84BF16, 0x84BF36, 0x84BFF6, 0x84C066, 0x84C126, 0x84C1F6, 0x84C2F6, 0x84C3B6, 0x84C476, 0x84C566, 0x84C586, 0x84C646, 0x84C706, 0x84C926,
    0x84CA16, 0x84CB76, 0x84CB96, 0x84CC56, 0x84CC86, 0x84CD46, 0x84CD86, 0x84CDB6, 0x84D376, 0x84D396, 0x84D456, 0x84D556, 0x84D636, 0x84D656, 0x84D7E6,
    0x84D8A6, 0x84D976, 0x84DA36, 0x84DAF6, 0x84DBB6, 0x84DC76, 0x84DD36, 0x84DDF6, 0x84DED6, 0x84DF96, 0x84E076, 0x84E156, 0x84E176, 0x84E266, 0x84E366,
    0x84E426, 0x84E4E6, 0x84E5A6, 0x84E666, 0x84E736, 0x84E846, 0x84E906, 0x84EAA6, 0x84EB66, 0x84EC26, 0x84ECE6, 0x84EDA6, 0x84EDC6, 0x84EEA6, 0x84EF66,
    0x84F026, 0x84F146, 0x84F256, 0x84F3C6, 0x84F486, 0x84F546, 0x84F606, 0x84F6C6, 0x84F7A6, 0x84F866, 0x84F926, 0x84F9E6, 0x84FAA6, 0x84FAE6, 0x84FBA6,
    0x84FC66, 0x84FD26, 0x84FD46, 0x84FEB6, 0x84FFA6, 0x84FFC6, 0x8500A6, 0x850166, 0x850186, 0x850246, 0x850306, 0x8503C6, 0x8504C6,
    0x850586, 0x8505A6, 0x850666, 0x850726, 0x8507E6, 0x850806, 0x850826, 0x850846, 0x8509E6, 0x850A06, 0x850AC6, 0x850B86, 0x850C46, 0x850D06,
    0x850D56, 0x850E16, 0x850ED6, 0x850FB6, 0x851076, 0x851136, 0x8511F6, 0x8513A6, 0x851466, 0x851546, 0x851606, 0x8516F6, 0x8517B6, 0x851876, 0x851936,
    0x8519F6, 0x851AD6, 0x851BB6, 0x851C76, 0x851D36, 0x851DF6, 0x851EB6, 0x851F76, 0x852066, 0x852186, 0x852246, 0x852306, 0x8523C6, 0x852486, 0x852546,
    0x852606, 0x852706, 0x8527C6, 0x8528D6, 0x852996, 0x852AD6, 0x852B96, 0x852C56, 0x852D16, 0x852DD6, 0x852E96, 0x852F76, 0x853036, 0x8530F6, 0x8531C6,
    0x8532E6, 0x8533A6, 0x8533C6, 0x8533E6, 0x8534C6, 0x8535C6, 0x853686, 0x853746, 0x853806, 0x8538E6, 0x8539A6, 0x853A66, 0x853B26, 0x853BE6, 0x853D46,
    0x853E96, 0x853F76, 0x854036, 0x854116, 0x8541D6, 0x854296, 0x854456, 0x854516, 0x854536, 0x854656, 0x854716, 0x854736, 0x854756, 0x854776,
    0x854796, 0x854906, 0x8549E6, 0x854AC6, 0x854AE6, 0x854BD6, 0x854BF6, 0x854CD6, 0x854E66, 0x854F56, 0x855016, 0x855036, 0x855056, 0x855116,
    0x8551D6, 0x855296, 0x855386, 0x8553A6, 0x855496, 0x855576, 0x855596, 0x8555B6, 0x8556E6, 0x855706, 0x855726, 0x8557E6, 0x8558A6,
    0x855966, 0x855A46, 0x855B06, 0x855BC6, 0x855CA6, 0x855D96, 0x855E86, 0x855F46 };

    constexpr int AddressForFldDWordC9DFF0 = 0x5768B7;
    constexpr std::array<int, 3> AddressesForFCompDWordC9DFF0 = { 0x685404, 0x685462, 0x6A6FD9 };
    constexpr std::array<int, 4> AddressesForFAddDWordC9DFF0 = { 0x718BD7, 0x718CB6, 0x718D42, 0x718DE0 };
    constexpr std::array<int, 5> AddressesForFMulDWordC9DFF4 = { 0x57473B, 0x5765C0, 0x576689, 0x57672F, 0x5767F8 };
    constexpr std::array<int, 3> AddressesForFAddDWordC9DFF4 = { 0x718CAC, 0x718D2A, 0x718DD6 };
    constexpr int AddressForFMulQWordC9DFF8 = 0x718C37;
#pragma endregion

    const auto version = GetGameVersion();
    //正常に日本語化できない（と思われる）バージョンでは日本語化できない旨を知らせてexeの起動を止める
    if (version == GameVersion::v10US_COMPACT || version == GameVersion::STEAM || version == GameVersion::STEAM_LV || version == GameVersion::UNKNOWN)
    {
        ShowErrorBox();
        ExitProcess(0);
    }

    memcpy(reinterpret_cast<void*>(0x7199AB), instrForCFont_RenderFontBuffer1.data(), 0x5);
    memcpy(reinterpret_cast<void*>(0x718B11), instrForCFont_PrintChar1.data(), 0x5);
    memcpy(reinterpret_cast<void*>(0x718B33), instrForCFont_PrintChar2.data(), 0x5);
    memcpy(reinterpret_cast<void*>(0x719A8D), instrForCFont_RenderFontBuffer3.data(), 0x5);
    memcpy(reinterpret_cast<void*>(0x7197A2), instrFor719750.data(), 0x5);
    memcpy(reinterpret_cast<void*>(0x71A150), instrFor71A150.data(), 0x5);
    memcpy(reinterpret_cast<void*>(0x7199CD), instrForCFont_RenderFontBuffer2.data(), 0x4);
    memcpy(reinterpret_cast<void*>(0x856E00), instrFor856E00.data(), 0x18E);

    for (auto address : AddressesForFMulDWordC9DFF0)
    {
        if (address != 0)
        {
            memcpy(reinterpret_cast<void*>(address), instrForFMulDWordC9DFF0.data(), 0x6);
        }
    }

    memcpy(reinterpret_cast<void*>(AddressForFldDWordC9DFF0), instrForFldDWordC9DFF0.data(), 0x6);

    for (auto address : AddressesForFCompDWordC9DFF0)
    {
        if (address != 0)
        {
            memcpy(reinterpret_cast<void*>(address), instrForFCompDWordC9DFF0.data(), 0x6);
        }
    }

    //Pricedownで','と'.'が出るようにする
    auto comp = static_cast<unsigned char>(0xFF);
    memcpy(reinterpret_cast<void*>(0x718C6E), &comp, 0x1);

    for (auto address : AddressesForFAddDWordC9DFF0)
    {
        if (address != 0)
        {
            memcpy(reinterpret_cast<void*>(address), instrForFAddDWordC9DFF0.data(), 0x6);
        }
    }

    for (auto address : AddressesForFMulDWordC9DFF4)
    {
        if (address != 0)
        {
            memcpy(reinterpret_cast<void*>(address), instrForFMulDWordC9DFF4.data(), 0x6);
        }
    }

    for (auto address : AddressesForFAddDWordC9DFF4)
    {
        if (address != 0)
        {
            memcpy(reinterpret_cast<void*>(address), instrForFAddDWordC9DFF4.data(), 0x6);
        }
    }

    memcpy(reinterpret_cast<void*>(AddressForFMulQWordC9DFF8), instrForFMulQWordC9DFF8.data(), 0x6);
}
